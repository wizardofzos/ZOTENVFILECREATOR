#!/bin/python

import argparse, sys

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, prog="envding", description=f"""Creates an envfile for ZOSOpenTools (zopen-installed) tools based on your default envvars and the ones set by the .bootenv file generated by zopen.

Install the ZOSOpenTools via https://github.com/ZOSOpenTools/meta/releases/latest and make sure all the binaries work. 

Then do the following:
  1. Log off from z/OS
  2. Log on to z/OS (ssh)
  3. Execute "export > {bcolors.OKGREEN}pre{bcolors.ENDC}"
  4. Activate the ZOT environment via . /path/to/.bootenv
  5. Execute "export > {bcolors.OKGREEN}post{bcolors.ENDC}"
  6. Transfer these two files (ASCII) to the machine that can run this script
  7. Execute "./envding --pre={bcolors.OKGREEN}pre{bcolors.ENDC} --post={bcolors.OKGREEN}post{bcolors.ENDC} --envfile={bcolors.OKGREEN}.zotboot{bcolors.ENDC}"
  8. Transfer the created .zotboot to z/OS (ASCII)
  9. Use the resulting output as a 'quicker' envfile to be sourced on your z/OS
 10. Or source that file from /etc/profile to enable it for all you users :)
     When you do, make sure to 'disable' that when generating a new envfile via this tool...""")

parser.add_argument("--pre", type=str,
                    default='pre',
                    help=f"""Filename of your environment settings before sourcing .bootenv
Defaults to pre""")

parser.add_argument("--post", type=str,
                    default='post',
                    help=f"""Filename of your environment settings after sourcing .bootenv
Defaults to pre""")

parser.add_argument("--envfile", type=str,
                    default='.zotboot',
                    help=f"""Filename of your new environment file
Defaults to .zotboot""")

args = parser.parse_args()

pre  = args.pre
post = args.post
envfile = args.envfile

print(f"Comparing environment variables in original '{pre}' and zot-added '{post}' to see what our new envfile should look like...")

try:
    with open(pre) as prefile:
        env_pre = prefile.read().splitlines()
except:
    print(f"{bcolors.BOLD}S013-18{bcolors.ENDC}: pre-zot-envfile {pre} not found, please respecify")
    sys.exit(0)

try:
    with open(post) as postfile:
        env_post = postfile.read().splitlines()
except:
    print(f"{bcolors.BOLD}S013-18{bcolors.ENDC}: post-zot-envfile {post} not found, please respecify")
    sys.exit(0)


pre_vars = {}
post_vars = {}

for env in env_pre:
    parts = env.split('=')
    pre_vars[parts[0]] = parts[1].replace('"','')

for env in env_post:
    parts = env.split('=')
    post_vars[parts[0]] = parts[1].replace('"','')

newvars = {}

wenowant = ['LOGNAME','MAIL','PS1','SHELL','SSH_CLIENT','SSH_CONNECTION','SSH_TTY','USER','_']

for var in post_vars:
    print(f"{bcolors.HEADER}  - {var}: {bcolors.ENDC}", end=' ', flush=True)
    if var in wenowant:
        print(f"{bcolors.BOLD}skipping{bcolors.ENDC}")
        continue
    if var in pre_vars:
        old = pre_vars[var]
        new = post_vars[var]
        if old == new:
            print(f'{bcolors.WARNING}same in both files, no need to go to {envfile}',flush=True)
        else:
            print(f"{bcolors.UNDERLINE}different in new envrionment, checking for new values{bcolors.ENDC}", flush=True)
            added_vars = []
            oldvals = old.split(':')
            newvals = new.split(':')
            for val in newvals:
                if val not in oldvals:
                    print(f'    - found new value: {bcolors.OKGREEN}{val}{bcolors.ENDC}')
                    added_vars.append(val)
            newvars[var] = f'{":".join(added_vars)}:${var}'
                
           

    else:
        print(f'{bcolors.FAIL}new envvar so we bring to {envfile}{bcolors.ENDC}')
        newvars[var] = post_vars[var]
    

newenvfile = []
print("")
for var in newvars:
    line = f'{var}="{newvars[var]}"'
    newenvfile.append(line+"\n")

with open(envfile,'w') as e:
    e.writelines(newenvfile)

print(f"""New envfile written to {bcolors.BOLD}{envfile}{bcolors.ENDC}.

Transfer this to z/OS (ASCII) to source it directly.
Make sure to rerun this procedure after installing new ZOSOpenTools or moving them.

{bcolors.BOLD}Don't add this to /etc/profile to enable ZOSOpenTools for all your users, 
but rather add a single line to source this file from the /etc/profile.{bcolors.ENDC}

That way you can remove that line to regenerate it after updates to ZOSOpenTools


""")


